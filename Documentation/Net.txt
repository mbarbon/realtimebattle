  ////////////////////////////
 // I. Introduction        //
////////////////////////////

A mail from Erik : 
[
the best approch would be to have three parts:

(1) A robot server, which handles a particular game.
(2) An meeting place server, where people can chat and decide to setup a
    game. This server then launches the robot server for the game either
    locally or on some users machine.
(3) A robot-client.
]

A mail from Ragnar : 
[
The (1) server is an integrated server in RTB which should look (when
running RTB) the same as a local robot. The difference is that you
can not start several copies of a networked robot connected to RTB.

The robot-client (3) application takes a local (where the client is
running) robot as argument and the robot runs locally communicating as
usual but with the robot-client which sends the commands from the robot to
the RTB-server. The programmer will not need to know anything on how to
program sockets and tcp/ip.

The Meeting place server (2) is what in freeciv is called a meta-server.
This is  a list of where there are RTB-servers running and thus you can
see if you can join a tournament, this could be developed a bit further as
ideas come in, for example an automatic ladder-competition, etc.
]

  ////////////////////////////
 // II. Process            //
////////////////////////////

* First the Server open a socket to wait for friends
* He execute a Root Client (see Connection types below) that should immedialty connect on him... (That is not a very good idea, but I didn't find any other way) 
* The Chat Clients can open sockets and chat together (They decide what they want to play, the robots that are going to fight... The server establish a list of the robots with the chat client that submit them...
* The Root decide to begin the game
* The server send to each chat client the robots he have to launch (I think the server can't execute a distant program... can he?)
* Each Client execute his robot clients(!!!)
* The robot client(!!!) execute the robot program(!!!)
* The robot client(!!!) try to connect to the server

* If everyone is ready... lets play...
  * The chat client can't send messages anymore (except "quit" : what should we do??? : kill every robots sent by this chat or just kill the chat???) (maybe they can keep on chating (i.e. my robots are better than yours))
  * The root client can play with the speed of the game... 
  * The robots are fighting...
  * The server assum his responsabilities :
    * Send the informations to the robots
    * Send the arena description, robot motions and energie, stats to the chat

* This is the end of the game :
  * kill the robots 
  * let the chat submit new ideas

Maybe a little 'UML' diagram would be more explicit... I will work on it latter



  /////////////////////////////////
 // III. About sending messages //
/////////////////////////////////

Mail from Ragnar :
[
Another point is that I want it possible to send various-length messages
without (a low) length-limit or a stop-character. My suggestion is: send
messages in packages with the length of the message first (two bytes
allows 2^16 characters long messages). The packages them self  could be
fixed size so you read in everything and parse it as it comes.
]

message_lentgh message_type   message
    [  ]          [  ]        [ ... ]
   2 char       2 char        n char

Connection types :
Root : the manager... decide everything
Chat : can chat with other chaters. Can submit a robot name. Launch robots...
Robot : The robot client

Message types :
@I : Message for initialisation
@M : Message from a chater to the server for other chaters...                  Chater           Server             Chater
@m : Message from server send by a chater for other chaters                    mes  ----@M----->  mes  ----@m-----> receive

@C : A Command to execute (see below)
S_ : Submit a robot/arena (i.e. message from a chat to submit a robot)

st : A modification in statistics
rp : A modification on robot position 
rm : A message to display in the message window (message from a robot)
aa : Add a new objetc on the arena
ad : The arena definition is coming (only the 'picture')

@R : a robot command... (Maybe we will have to split it...)

@B : We are going to start the game!!!

... [Add everything that could be fine...] ...

Initialisation :
Only one message : "<lentgh>@I <protocol_version> <connection_type> <name>"
courant protocol version : RTBNetV1
connection type : see above
This may be the only message using the @I message type
Maybe we can reply with a welcome message ...

Submit:
add robots : "SR <robot1><robot2><robot3><...>"
add arenas : "SA <arena1><arena2><arena3><...>"
del robots : "Sr <robot1><robot2><robot3><...>"
del arenas : "Sa <arena1><arena2><arena3><...>"
Reply this submit with s(R|A|r|a) and list of added/deleted elements

Messages:
@M[dest]message : Chat1 send the message to the server (dest = "all" to send it to everybody)
@m[from]message : Server send the message from Chat1 to the "dest" specified in the previous message


Command form a Root connection (don't forget to start with @C):
* quit : close the server (this will send the "@C Close" message to everybody)
* start : start the game (from this point, chat connections can only observe the fight)
* pause : ...
* step : ...
* ...
* kick : my favorite game

Command from every basic chater :
* quit : quit the game (don't forget to delete every robot he could have launched...)

Command from server to chat :
* Close : we are about to delete you socket from our list...
* Start : The game is starting... be prepare and connect your robots
* Kill <robot_name> : you can kill him, he is useless 
  

  /////////////////////////
 // Other               //
/////////////////////////

A mail from Ragnar
[
I think that the server should have a NetConnection class containing the
information about the Connection, there should be a list of all
NetConnections available. This list is distributed to the gui or a
start_tournament_script or whatever. The gui should then select the robots
that may start in the new tournament
]
